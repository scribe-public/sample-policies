package verify

import future.keywords.in

default allow := false

default violations := []

# Default severity threshold
default severity_threshold := 2

short_description = "Check SARIF results for security-severity violations"

description = "Identifies SARIF results where security-severity exceeds the defined threshold."


verify = v {
	v := {
		"allow": allow,
		"violation": {
			"type": "severity-threshold-exceeded",
			"details": violations,
		},
		"summary": [{
			"allow": allow,
			"reason": reason,
			"violations": count(violations),
		}],
	}
}

# Allow only if there are no violations
allow {
    count(violations) == 0
}

reason = v {
	v := sprintf("%d violations over threshold", [count(violations)])
}

# Violations based on severity threshold
violations = j {
    j := {r |
		# d := base64.decode(input.evidence.predicate.content)
		# provenance := json.unmarshal(d)
		rule_result = input.evidence.predicate.content.runs[_]
        get_security_severity(rule_result) > severity_threshold
        r := {
            "rule": rule_result.ruleId,
            "severity": get_security_severity(rule_result),
            "location": rule_result.locations[0].physicalLocation.artifactLocation.uri,
        }
		
	}
}

# Extract the security-severity from result properties
get_security_severity(run) = severity {
    severity := to_number(run.properties["security-severity"])
}
