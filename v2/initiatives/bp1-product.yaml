name: "Venafi Blueprint"
id: "blueprint-securesoftwarepipeline"
url: https://github.com/Venafi/blueprint-securesoftwarepipeline

defaults:
  evidence:
    signed: true

controls:
  - name: "Restrict administrative access to CI/CD tools"
    id: "CT-1"
    description: "Restrict administrative access to CI/CD tools"
    full-description: |
      It's important to ensure that only authorized persons can make administrative changes to the CI/CD system. If an unauthorized person is able to gain access, changes to pipeline definitions enable the subversion of many of the remaining controls in this document.

      Both host and application-layer access to CI/CD tools should be protected with multi-factor authentication.

      > :skull:  Instead of manipulating code, attackers will seek to control the CI/CD pipeline itself. This can enable both breaches without detection and long-term impact far greater than manipulating code. Attackers seek to introduce new pipelines, insert malicious code, or modify pipelines that introduce controls like code signing.
    when:
      gate: Code
    rules:
      - uses: gitlab/org/max-admins@v1
        description: "[CT-1] Restrict the maximum number of organization admins"
        level: error
        with:
          max_admins: 1


  - name: "Only accept commits signed with a developer GPG key"
    id: "CT-2"
    description: "Only accept commits signed with a developer GPG key"
    full-description: |
      Unsigned code commits are challenging, if not impossible, to trace and pose a risk to the integrity of the code base. Requiring commits to be signed with a developer GPG key helps to ensure nonrepudiation of commits and increases the burden on the attacker seeking to insert malicious code.

      > :skull:  An easy win for attackers can be to infect developers’ machines or steal credentials that give access. Attackers can then manipulate code or inject new malicious code as they please.
    when:
      gate: Code
    rules:
      - uses: gitlab/project/reject-unsigned-commits@v1
        description: "[CT-2] Verify that reject_unsigned_commits is enabled for the project"
        level: error

      - uses: gitlab/project/check-signed-commits@v1
        description: "[CT-2] Verify that all commits in the project are signed"
        level: error


  - name: "Automation access keys expire automatically"
    id: "CT-3"
    description: "Automation access keys expire automatically"
    full-description: |
      Ensuring that access keys used by automation expire periodically creates a shorter window of attack when keys are compromised.

      > :skull:  Automated build systems are a hacker’s dream: they are out of sight of humans and operate at machine speed. Attackers can either steal access keys or mint new ones through a series of attacks. These are especially hard to detect.
    when:
      gate: Code
    rules:
      - uses: gitlab/org/longlive-tokens@v1
        description: "[CT-3] Verify that no organization tokens have an excessively long lifespan"
        level: error


  - name: "Reduce automation access to read-only"
    id: "CT-4"
    description: "Reduce automation access to read-only"
    full-description: |
      CI systems should have read access only to source code repositories following the principle of least privilege access.

      > :skull:  Automated build processes are a hacker’s dream: they are out of sight of humans and operate at machine speed. Attackers can bypass usual source code review process to make changes to the source code that may be hard to detect.
    when:
      gate: Code
    rules:
      - uses: gitlab/org/forbid-token-scopes@v1
        description: "[CT-4] Verify that no organization tokens have a disallowed scope"
        level: error
        with:
          project_scopes:
              - write_api
              - write_repository
              - write_registry
              - write_registry_image
              - write_package_registry
              - write_package
              - write_repository_hook


  - name: "Any critical or high severity vulnerability breaks the build"
    id: "CT-6"
    description: "Any critical or high severity vulnerability breaks the build"
    full-description: |
      Supply chain attacks may introduce code with vulnerabilities into the software pipeline. Using static application security testing (SAST) helps to identify serious security issues, including poor cryptographic practices, hard-coded credentials, and injection vulnerabilities. Performing SAST in the pipeline and failing the pipeline on the discovery of a critical- or high-severity discovery helps to minimize the chance of introducing intentionally insecure code.

      Likewise, software composition analysis (SCA) identifies software libraries with known vulnerabilities. The pipeline should fail if a library with a critical- or high-severity vulnerability is identified.

      > NOTE This control helps to mitigate against a failure of Control-4.

      Both SAST and SCA might identify weaknesses in software that are not true vulnerabilities. So, selecting tools that allow you to set a baseline of acceptable findings can help to ensure that this control is adopted successfully.

      This control should be applied at various stages of the pipeline, including IDE-integrated checks, when committing to a branch, at the start of every pull request, and at merge requests into the main branch. Early identification of vulnerabilities can reduce remediation costs.

      > IMPORTANT! This control would also need a defined and documented vulnerability exception management process to be in place.

      > :skull:  Most often the result of unexpected consequences, vulnerabilities are a reality of developer life. But attackers, too, might contribute vulnerabilities that go unseen and undetected and can proliferate through a software supply chain quickly.

    when:
      gate: Collaboration
    rules:
      - uses: api/scribe-api-cve@v1
        description: "[CT-6] Verify no critical or high CVEs"
        level: error
        with:
          superset:
            cve:
              severity: 6
              max: 0


  - name: "Validate artifact digest"
    id: "CT-8"
    description: "Validate artifact digest"
    full-description: |
      Before an artifact is deployed in any environment, its digest should be validated against the artifact in the repository to ensure that it has not been compromised.

      > :skull:  At all times, attackers are attempting to infiltrate systems and make modifications to code through any variety of means. Adversaries insert targeted attacks or common vulnerabilities to suit their unpredictable needs.
    when:
      gate: Collaboration
    rules:
      - uses: sbom/evidence-exists@v1
        description: "[CT-8] Verify required evidence exists"
        level: error
        evidence:
          format-type: cyclonedx-json


  - name: "Pull-requests require two reviewers (including one default reviewer) and a passing build to be merged"
    id: "CT-9"
    description: "Pull-requests require two reviewers (including one default reviewer) and a passing build to be merged"
    full-description: |
      Require two code reviews at the time of pull-requests, including one from a developer who is an owner of that code. In addition to supporting good coding practices, this control also helps to ensure that no commits can be made without competent human oversight. Requiring that all tests are passed ensures that the above controls are not circumvented.

      > :skull:  At all times, attackers are attempting to infiltrate systems and make modifications to code through any variety of means. Adversaries insert targeted attacks or common vulnerabilities to suit their unpredictable needs. We cannot assume that the adversary is a member of your own team.
    when:
      gate: Collaboration
    rules:
      - uses: gitlab/project/approvals-policy-check@v1
        description: "[CT-9] Verify that the project's merge approval policy complies with the requirements"
        level: error


  - name: "Available container images don’t have any high or critical vulnerabilities"
    id: "CT-11"
    description: "Available container images don’t have any high or critical vulnerabilities"
    full-description: |
      Just as applications need to be tested for vulnerabilities before being placed in production, so do the container images into which they are packaged for deployment. Container images could have open-source vulnerabilities as long as they contain open-source software (such as web application servers, networking libraries, and databases). Additionally, containers might have configuration vulnerabilities that allow attackers to have more access than they should to the resources that containers manage. Container images can be tested with a container security tool in the pipeline.
    when:
      gate: Staging
    rules:
      - uses: api/scribe-api-cve@v1
        description: "[CT-11] Verify Scribe CVE policy violations (by API)"
        level: error
        with:
          superset:
            cve:
              severity: 6
              max: 0


  - name: "Validate artifact signatures and digests"
    id: "CT-12"
    description: "Validate artifact signatures and digests"
    full-description: |
      As part of deploying artifacts from the internal registry, validating the signature of the artifact against the digest ensures that the artifact was not tampered with in the repository and that the artifact being deployed is the same one that was tested.

      > :skull:
      > Through credential theft, vulnerability exploit, targeted attack or more, attackers succeed in inserting their malicious code into pipelines and repositories. Code should be considered suspect and malicious.
    when:
      gate: Staging
    rules:
      - uses: sbom/artifact-signed@v1
        description: "[CT-12] Verify artifact is signed"
        level: error
        evidence:
          format-type: cyclonedx-json


  - name: "Scan deployed images in production"
    id: "CT-13"
    description: "Scan deployed images in production"
    full-description: |
      It is always a good idea to validate pre-production controls in production. This helps to ensure that the controls prior were followed for all software in production.

      > :skull:
      > At all times, attackers are attempting to infiltrate systems and make modifications to code through any variety of means. Adversaries insert targeted attacks or common vulnerabilities to suit their unpredictable needs. We cannot assume that the adversary is a member of your own team.
    when:
      gate: Staging
    rules:
      - uses: sbom/artifact-signed@v1
        description: "[CT-13] Verify artifact is signed"
        level: error
      - uses: sbom/blocklist-packages@v1
        description: "[CT-13] Verify disallowed artifact's dependency count does not exceed specified threshold"
        level: error
        with:
          blocklist:
            - "liblzma5@5.6.0"
            - "liblzma5@5.6.1"
            - "xz-utils@5.6.0"
            - "xz-utils@5.6.1"
      - uses: api/scribe-api-cve@v1
        description: "[CT-13] Verify no critical or high CVEs"
        level: error
        with:
          superset:
            cve:
              severity: 6
              max: 0
