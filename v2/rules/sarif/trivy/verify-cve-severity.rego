package verify

import future.keywords.in
import data.scribe as scribe

default allow := false
default violations := []
default asset := {}

asset = scribe.get_asset_data(input.evidence)


default reason := "No security severity violations detected."
default severity_threshold := 2

# If provided, override the default severity threshold.
severity_threshold = input.config.args.severity_threshold

##########################################################################
# Final Verify Object
##########################################################################
verify = result {
  result := {
    "allow": allow,
    "violation": {
      "type": "severity-threshold-exceeded",
      "details": violations,
    },
    "asset": asset,
    "summary": [{
      "allow": allow,
      "reason": reason,
      "violations": count(violations)
    }]
  }
}


##########################################################################
# Decision Logic
##########################################################################
# The rule is allowed if there are no violations.
allow {
  count(violations) == 0
}

##########################################################################
# Reason for Summary
##########################################################################
reason = msg {
  allow
  msg := "All SARIF results are within the acceptable security severity threshold."
}
reason = msg {
  not allow
  msg := sprintf("%d violations exceed the threshold of %d.", [count(violations), severity_threshold])
}

##########################################################################
# Evaluate Violations Based on Severity Threshold
##########################################################################
violations = results {
  results := [ v |
    run_result := input.evidence.predicate.content.runs[0].results[_]
    rule_def   := input.evidence.predicate.content.runs[0].tool.driver.rules[run_result.ruleIndex]
    get_security_severity(rule_def) > severity_threshold
    v := {
      "rule": run_result.ruleId,
      "severity": get_security_severity(rule_def),
      "location": run_result.locations[0].physicalLocation.artifactLocation.uri,
    }
  ]
} else = results {
  results := []
}

##########################################################################
# Helper Function: Extract Security Severity
##########################################################################
get_security_severity(rule) = severity {
  severity := to_number(rule.properties["security-severity"])
}
